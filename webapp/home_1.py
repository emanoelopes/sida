import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from pathlib import Path
import pickle
import sys
import os

# Adicionar o diret√≥rio src ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.utilidades import (
    carregar_dados_dashboard, 
    gerar_metricas_consolidadas, 
    exibir_metricas_principais,
    criar_sidebar_dashboard
)
from src.vizualizacoes import (
    criar_grafico_distribuicao_notas,
    criar_grafico_distribuicao_cliques,
    criar_grafico_desempenho_por_genero_uci,
    criar_grafico_desempenho_por_genero_oulad,
    criar_grafico_correlacao_uci,
    criar_grafico_atividades_oulad,
    criar_grafico_faltas_vs_desempenho,
    criar_grafico_tempo_estudo_vs_desempenho,
    criar_grafico_distribuicao_idade_oulad,
    criar_grafico_resultado_final_oulad,
    criar_grafico_consumo_alcool_vs_desempenho,
    criar_grafico_escolaridade_pais_vs_desempenho,
    criar_grafico_comparativo_aprovacao
)

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(
    page_title="Dashboard Educacional Consolidado", 
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal
st.title("üìä Dashboard Educacional Consolidado")
st.markdown("---")

# Carregar dados
with st.spinner("Carregando dados..."):
    df_uci, df_oulad = carregar_dados_dashboard()

# Criar sidebar
periodo, genero = criar_sidebar_dashboard()

# Verificar se os dados foram carregados
if df_uci.empty and df_oulad.empty:
    st.error("‚ùå Nenhum dado foi carregado. Verifique se os arquivos pickle existem.")
    st.stop()

# Gerar m√©tricas consolidadas
metricas_consolidadas = gerar_metricas_consolidadas(df_uci, df_oulad)

# Exibir m√©tricas principais
st.markdown("## üìà M√©tricas Principais")
exibir_metricas_principais(metricas_consolidadas)

# Contexto do dashboard
st.markdown("## ‚ÑπÔ∏è Sobre o Dashboard")
st.markdown("""
Este dashboard consolida informa√ß√µes de duas bases de dados educacionais p√∫blicas:

- **üìö UCI (University of California Irvine)**: Dados de estudantes de escolas p√∫blicas portuguesas, 
  incluindo informa√ß√µes demogr√°ficas, acad√™micas e comportamentais.

- **üåê OULAD (Open University Learning Analytics Dataset)**: Dados de uma plataforma de 
  aprendizado online, incluindo atividades dos estudantes e resultados acad√™micos.

Essas an√°lises ajudam gestores educacionais e professores a identificar padr√µes, 
fatores de sucesso e √°reas que necessitam de interven√ß√£o.
""")

# Se√ß√£o de visualiza√ß√µes
st.markdown("## üìä Visualiza√ß√µes Principais")

# Tabs para organizar as visualiza√ß√µes
tab1, tab2, tab3, tab4 = st.tabs(["üéØ Desempenho Geral", "üë• Demografia", "üìö An√°lises UCI", "üåê An√°lises OULAD"])

with tab1:
    st.markdown("### Compara√ß√£o de Desempenho entre Datasets")
    
    # Gr√°fico comparativo de aprova√ß√£o
    fig_comparativo = criar_grafico_comparativo_aprovacao(df_uci, df_oulad)
    if fig_comparativo:
        st.pyplot(fig_comparativo)
        plt.clf()
    
    # Distribui√ß√µes lado a lado
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Distribui√ß√£o de Notas (UCI)")
        fig_notas = criar_grafico_distribuicao_notas(df_uci)
        if fig_notas:
            st.pyplot(fig_notas)
            plt.clf()
    
    with col2:
        st.markdown("#### Distribui√ß√£o de Cliques (OULAD)")
        fig_cliques = criar_grafico_distribuicao_cliques(df_oulad)
        if fig_cliques:
            st.pyplot(fig_cliques)
            plt.clf()

with tab2:
    st.markdown("### An√°lise Demogr√°fica")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Desempenho por G√™nero - UCI")
        fig_genero_uci = criar_grafico_desempenho_por_genero_uci(df_uci)
        if fig_genero_uci:
            st.pyplot(fig_genero_uci)
            plt.clf()
    
    with col2:
        st.markdown("#### Resultado por G√™nero - OULAD")
        fig_genero_oulad = criar_grafico_desempenho_por_genero_oulad(df_oulad)
        if fig_genero_oulad:
            st.pyplot(fig_genero_oulad)
            plt.clf()
    
    # Distribui√ß√£o de idade OULAD
    st.markdown("#### Distribui√ß√£o por Faixa Et√°ria - OULAD")
    fig_idade = criar_grafico_distribuicao_idade_oulad(df_oulad)
    if fig_idade:
        st.pyplot(fig_idade)
        plt.clf()

with tab3:
    st.markdown("### An√°lises Detalhadas - Dataset UCI")
    
    # Faltas vs Desempenho
    st.markdown("#### Rela√ß√£o entre Faltas e Desempenho")
    fig_faltas = criar_grafico_faltas_vs_desempenho(df_uci)
    if fig_faltas:
        st.pyplot(fig_faltas)
        plt.clf()
    
    # Tempo de estudo vs Desempenho
    st.markdown("#### Tempo de Estudo vs Desempenho")
    fig_estudo = criar_grafico_tempo_estudo_vs_desempenho(df_uci)
    if fig_estudo:
        st.pyplot(fig_estudo)
        plt.clf()
    
    # Consumo de √°lcool vs Desempenho
    st.markdown("#### Consumo de √Ålcool vs Desempenho")
    fig_alcool = criar_grafico_consumo_alcool_vs_desempenho(df_uci)
    if fig_alcool:
        st.pyplot(fig_alcool)
        plt.clf()
    
    # Escolaridade dos pais vs Desempenho
    st.markdown("#### Escolaridade dos Pais vs Desempenho")
    fig_escolaridade = criar_grafico_escolaridade_pais_vs_desempenho(df_uci)
    if fig_escolaridade:
        st.pyplot(fig_escolaridade)
        plt.clf()
    
    # Matriz de correla√ß√£o
    st.markdown("#### Matriz de Correla√ß√£o")
    fig_corr = criar_grafico_correlacao_uci(df_uci)
    if fig_corr:
        st.pyplot(fig_corr)
        plt.clf()

with tab4:
    st.markdown("### An√°lises Detalhadas - Dataset OULAD")
    
    # Distribui√ß√£o de atividades
    st.markdown("#### Distribui√ß√£o de Atividades por Tipo")
    fig_atividades = criar_grafico_atividades_oulad(df_oulad)
    if fig_atividades:
        st.pyplot(fig_atividades)
        plt.clf()
    
    # Resultado final
    st.markdown("#### Distribui√ß√£o de Resultados Finais")
    fig_resultado = criar_grafico_resultado_final_oulad(df_oulad)
    if fig_resultado:
        st.pyplot(fig_resultado)
        plt.clf()

# Se√ß√£o de insights
st.markdown("## üí° Principais Insights")

col1, col2 = st.columns(2)

with col1:
    st.markdown("### üìö Dataset UCI")
    if not df_uci.empty:
        uci_metricas = metricas_consolidadas['metricas_uci']
        st.markdown(f"""
        - **Total de estudantes**: {uci_metricas.get('total_alunos', 0):,}
        - **M√©dia de notas finais**: {uci_metricas.get('media_nota_final', 0):.1f}
        - **Taxa de aprova√ß√£o**: {uci_metricas.get('taxa_aprovacao', 0):.1f}%
        - **M√©dia de faltas**: {uci_metricas.get('media_faltas', 0):.1f}
        """)

with col2:
    st.markdown("### üåê Dataset OULAD")
    if not df_oulad.empty:
        oulad_metricas = metricas_consolidadas['metricas_oulad']
        st.markdown(f"""
        - **Total de estudantes**: {oulad_metricas.get('total_estudantes', 0):,}
        - **M√©dia de cliques**: {oulad_metricas.get('media_cliques', 0):.1f}
        - **Taxa de aprova√ß√£o**: {oulad_metricas.get('taxa_aprovacao', 0):.1f}%
        - **Atividade mais comum**: {oulad_metricas.get('atividade_mais_comum', 'N/A')}
        """)

# Footer
st.markdown("---")
st.markdown("**Mestrado em Tecnologia Educacional - UFC** | Dashboard desenvolvido para an√°lise de dados educacionais")